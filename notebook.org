This notebook is used to track current goals and activities in the
project. It is not an issue tracker (we use GitHub for that). It is a
place to record current activity, successes and failures and near term
plans. A lab notebook if you like.

For best results edit in Emacs Org mode.

* TODO Demo250 Push to Staging when tests pass

This will be an extension of Demo140. The goal is to push updated
images to DockerHub (tagged with "dev").

** DONE Push container to Docker Hub

*** DONE Create Docker Hub Organization called "ADTD"

https://hub.docker.com/u/adtd/dashboard/teams/owners/




*** DONE Manually push containers to the new org from the test machine

  - [X] Create a repository for each of the containers
    - [X] web
    - [X] rest
    - [X] integration_test
    - [X] load_test
  - [X] Manually push a "dev" tagged versio of each container
    - [X] web
    - [X] rest
    - [X] integration_test
    - [X] load_test





*** DONE Add a push command to Jenkins when tests pass

Used the promote build features.

Basically the integration_test is promoted when the load_test passes
(which itself is dependent on this integration_test passing).

When promoted the containers are built and published.

NOTE: in order for publication to work it is necessary to login to
Docker Hub - see ci/jenkins/jenkins_home/jobs/*/nextBuildNumber - in
order to login run the following command once the jenkins container is
running.

`docker exec ci_jenkins_1 docker login --email="foo@bar.org" --username="foo" --password="bar"`

** TODO Publish app to Marathon from Docker Hub

Command to publish the app is:

```
curl -X POST http://master0:8080/v2/groups -d @marathon.json -H "Content-type: application/json"
```

To update the deployment use. Note that this will default to creating
a deplyment if the group id does not already exist:

```
curl -X PUT http://master0:8080/v2/groups -d @marathon.json -H "Content-type: application/json"
```

To delete the deployment use:

```
curl -X GET http://master0:8080/v2/groups/azure
```

*** TODO make the PHP work

Currently the DNS lookup is not working:

array ( 'url' =>
'http://rest-demo-azure.marathon.mesos:8080/JerseyHelloWorld/rest/helloworld',
'content_type' => NULL, 'http_code' => 0, 'header_size' => 0,
'request_size' => 0, 'filetime' => -1, 'ssl_verify_result' => 0,
'redirect_count' => 0, 'total_time' => 7.7000000000000001E-5,
'namelookup_time' => 3.0000000000000001E-5, 'connect_time' => 0,
'pretransfer_time' => 0, 'size_upload' => 0, 'size_download' => 0,
'speed_download' => 0, 'speed_upload' => 0, 'download_content_length'
=> -1, 'upload_content_length' => -1, 'starttransfer_time' => 0,
'redirect_time' => 0, 'redirect_url' => '', 'primary_ip' => '',
'certinfo' => array ( ), 'primary_port' => 0, 'local_ip' => '',
'local_port' => 0, )error occured during curl exec. Additioanl info:

*** TODO update marathon.json to use adtd/*:stage

*** TODO increase timeout on docker deployment

Deploying using Marathon can take a few attempts to work as it needs
to pull down the new images and the task times out.


** TODO make the demo work on three machine cluster

Currently we can't scale web on a three machine cluster, presumably,
because there are insufficient resources.

* TODO Extract common items from docker-compose files

* TODO Rename "java" to "rest"
* TODO Remove the need for Marathon/Mesos DNS naming

In order to work with Marathon/Mesos we have to use Mesos DNS which
requires a Mesos/Marathon specific naming convention. This creates a
dependency on Marathon/Mesos.

Do what is necessary to revert changes in:

$ git commit -m "Use mesos DNS naming"
[master f70fbc6] Use mesos DNS naming
 2 files changed, 2 insertions(+), 2 deletions(-)
